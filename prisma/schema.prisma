// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator kysely {
  provider = "prisma-kysely"

  // Optionally provide a destination directory for the generated file
  // and a filename of your choice
  output       = "../src/lib/db"
  fileName     = "types.ts"
  // Optionally generate runtime enums to a separate file
  enumFileName = "enums.ts"
}

model User {
  // General not null fields
  id           String        @id @default(dbgenerated("gen_random_uuid()"))
  // externalId   String        @unique
  email        String        @unique
  phoneNumber  String
  createdAt    DateTime      @default(now())
  role         Role          @default(ROLE_USER)
  type         String
  approved     Boolean       @default(false)
  // Volunteer fields
  firstName    String?
  lastName     String?
  gender       String?
  bio          String?
  birthday     DateTime?
  skills       String?
  // Partner, Supporter fields + bio
  organization String?
  contact      Json?
  // Relations
  Donation     Donation[]
  Addresses    Address[]
  Certificate  Certificate[]

  MyEvents         Event[]
  MyFunds          Fundraising[]
  MyGrants         GrantFundraising[]
  EventAssociation EventAssociation[]
  FundAssociation  FundAssociation[]
  GrantAssociation GrantAssociation[]
}

enum Role {
  ROLE_USER
  ROLE_ADMIN
  ROLE_SUPER_ADMIN
}

model Event {
  id            String             @id @default(dbgenerated("gen_random_uuid()"))
  title         String
  description   String
  location      String
  roles         Json?
  createdAt     DateTime           @default(now())
  startTime     DateTime?
  endTime       DateTime?
  requiredTime  String?
  contact       Json?
  Owner         User?              @relation(fields: [ownerId], references: [id])
  ownerId       String?
  CategoryEvent CategoryEvent[]
  Users         EventAssociation[]

  @@index([ownerId])
}

model EventAssociation {
  id      String  @id @default(dbgenerated("gen_random_uuid()"))
  User    User?   @relation(fields: [userId], references: [id])
  userId  String?
  Event   Event?  @relation(fields: [eventId], references: [id])
  eventId String?
  status  String?
  type    String?

  @@index([userId])
  @@index([eventId])
}

model Fundraising {
  id                  String                @id @default(dbgenerated("gen_random_uuid()"))
  title               String
  description         String
  goalAmount          Int
  currentAmount       Int
  contact             Json?
  location            String?
  startTime           DateTime?
  endTime             DateTime?
  Owner               User?                 @relation(fields: [ownerId], references: [id])
  ownerId             String?
  Users               FundAssociation[]
  Donation            Donation[]
  CategoryFundraising CategoryFundraising[]

  @@index([ownerId])
}

model FundAssociation {
  id            String       @id @default(dbgenerated("gen_random_uuid()"))
  User          User?        @relation(fields: [userId], references: [id])
  userId        String?
  Fundraising   Fundraising? @relation(fields: [fundraisingId], references: [id])
  fundraisingId String?
  status        String?
  type          String?

  @@index([userId])
  @@index([fundraisingId])
}

model GrantFundraising {
  id                       String                     @id @default(dbgenerated("gen_random_uuid()"))
  title                    String
  description              String
  goalAmount               Int
  currentAmount            Int
  contact                  Json?
  location                 String?
  startTime                DateTime?
  endTime                  DateTime?
  Owner                    User?                      @relation(fields: [ownerId], references: [id])
  ownerId                  String?                    @unique
  Users                    GrantAssociation[]
  CategoryGrantFundraising CategoryGrantFundraising[]

  @@index([ownerId])
}

model GrantAssociation {
  id               String            @id @default(dbgenerated("gen_random_uuid()"))
  User             User?             @relation(fields: [userId], references: [id])
  userId           String?
  GrantFundraising GrantFundraising? @relation(fields: [grantId], references: [id])
  grantId          String?
  status           String?
  type             String?

  @@index([userId])
  @@index([grantId])
}

model Certificate {
  id          String  @id @default(dbgenerated("gen_random_uuid()"))
  name        String
  description String
  Volunteer   User?   @relation(fields: [volunteerId], references: [id])
  volunteerId String?

  @@index([volunteerId])
}

model Skill {
  id   String @id @default(dbgenerated("gen_random_uuid()"))
  name String
}

model Address {
  id           String  @id @default(dbgenerated("gen_random_uuid()"))
  country      String
  city         String
  provinceName String
  street       String
  User         User?   @relation(fields: [userId], references: [id])
  userId       String?

  @@index([userId])
}

model Donation {
  id            String       @id @default(dbgenerated("gen_random_uuid()"))
  amount        Int
  User          User?        @relation(fields: [userId], references: [id])
  userId        String?
  isPublicName  Boolean      @default(false)
  Fundraising   Fundraising? @relation(fields: [fundraisingId], references: [id])
  fundraisingId String?
  Payment       Payment?
  createdAt     DateTime     @default(now())

  @@index([userId])
  @@index([fundraisingId])
}

model Payment {
  id         String    @id @default(dbgenerated("gen_random_uuid()"))
  amount     Int
  invoiceId  String?
  status     String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime? @updatedAt
  Donation   Donation  @relation(fields: [donationId], references: [id])
  donationId String    @unique
  details    Json?
}

model Category {
  id                       String                     @id @default(dbgenerated("gen_random_uuid()"))
  name                     String
  type                     String?
  CategoryFundraising      CategoryFundraising[]
  CategoryEvent            CategoryEvent[]
  CategoryGrantFundraising CategoryGrantFundraising[]
}

model CategoryFundraising {
  id            String       @id @default(dbgenerated("gen_random_uuid()"))
  Fundraising   Fundraising? @relation(fields: [fundraisingId], references: [id])
  fundraisingId String?
  Category      Category?    @relation(fields: [categoryId], references: [id])
  categoryId    String?

  @@index([fundraisingId])
  @@index([categoryId])
}

model CategoryGrantFundraising {
  id                 String            @id @default(dbgenerated("gen_random_uuid()"))
  GrantFundraising   GrantFundraising? @relation(fields: [grantFundraisingId], references: [id])
  grantFundraisingId String?
  Category           Category?         @relation(fields: [categoryId], references: [id])
  categoryId         String?

  @@index([grantFundraisingId])
  @@index([categoryId])
}

model CategoryEvent {
  id         String    @id @default(dbgenerated("gen_random_uuid()"))
  Event      Event?    @relation(fields: [eventId], references: [id])
  eventId    String?
  Category   Category? @relation(fields: [categoryId], references: [id])
  categoryId String?

  @@index([eventId])
  @@index([categoryId])
}
