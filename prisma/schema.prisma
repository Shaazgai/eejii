// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator kysely {
  provider = "prisma-kysely"

  // Optionally provide a destination directory for the generated file
  // and a filename of your choice
  output       = "../src/lib/db"
  fileName     = "types.ts"
  // Optionally generate runtime enums to a separate file
  enumFileName = "enums.ts"
}

model User {
  // General not null fields
  id               String      @id @default(dbgenerated("gen_random_uuid()"))
  email            String      @unique
  phoneNumber      String
  createdAt        DateTime    @default(now())
  role             Role        @default(ROLE_USER)
  type             UserType    @default(USER_VOLUNTEER)
  requestSend      Boolean     @default(false)
  password         String?
  addressShort     String?
  //changed user request status boolean to 3 state
  requestStatus    UserStatus?
  // Volunteer fields
  firstName        String?
  lastName         String?
  gender           String?
  bio              String?
  birthDate        DateTime?
  skills           String?
  registerCode     String?
  // Partner, Supporter fields + bio
  organizationName String?
  organizationType String?
  introduction     String?
  contact          Json?

  // Relations
  Donation    Donation[]
  Addresses   Address[]
  Certificate Certificate[]

  MyEvents             Event[]
  MyProject            Project[]
  JoinedEvents         EventUser[]
  JoinedProjects       ProjectUser[]
  UserImage            UserImage[]
  receivedNotification Notification[] @relation("receiver")
  sendNotifications    Notification[] @relation("sender")
  Medias               Media[]
}

enum Role {
  ROLE_USER
  ROLE_ADMIN
  ROLE_SUPER_ADMIN
}

enum UserType {
  USER_VOLUNTEER
  USER_PARTNER
  USER_SUPPORTER
}

enum ProjectType {
  FUNDRAISING
  GRANT_FUNDRAISING
}

enum EventType {
  EVENT
  VOLUNTEERING
}

enum UserStatus {
  REQUEST_PENDING
  REQUEST_DENIED
  REQUEST_APPROVED
}

enum ProjectStatus {
  PENDING
  APPROVED
  DENIED
  DONE
}

model Event {
  id            String          @id @default(dbgenerated("gen_random_uuid()"))
  type          EventType       @default(VOLUNTEERING)
  title         String
  description   String
  location      String
  roles         Json?
  enabled       Boolean
  status        ProjectStatus?
  createdAt     DateTime        @default(now())
  startTime     DateTime?
  endTime       DateTime?
  requiredTime  String?
  contact       Json?
  Owner         User?           @relation(fields: [ownerId], references: [id])
  ownerId       String?
  CategoryEvent CategoryEvent[]
  Users         EventUser[]
  EventImage    EventImage[]

  @@index([ownerId])
}

model EventUser {
  id      String  @id @default(dbgenerated("gen_random_uuid()"))
  User    User?   @relation(fields: [userId], references: [id])
  userId  String?
  Event   Event?  @relation(fields: [eventId], references: [id])
  eventId String?
  status  String?
  type    String?

  @@index([userId])
  @@index([eventId])
}

model Project {
  id              String            @id @default(dbgenerated("gen_random_uuid()"))
  type            ProjectType       @default(FUNDRAISING)
  title           String
  description     String
  goalAmount      Int
  currentAmount   Int
  contact         Json?
  location        String?
  startTime       DateTime?
  endTime         DateTime?
  enabled         Boolean
  status          ProjectStatus?
  createdAt       DateTime          @default(now())
  Owner           User?             @relation(fields: [ownerId], references: [id])
  ownerId         String?
  Users           ProjectUser[]
  Donation        Donation[]
  CategoryProject CategoryProject[]
  ProjectImage    ProjectImage[]

  @@index([ownerId])
}

model ProjectUser {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?
  Project   Project? @relation(fields: [projectId], references: [id])
  projectId String?
  status    String?
  type      String?

  @@index([userId])
  @@index([projectId])
}

model Certificate {
  id          String  @id @default(dbgenerated("gen_random_uuid()"))
  name        String
  description String
  Volunteer   User?   @relation(fields: [volunteerId], references: [id])
  volunteerId String?

  @@index([volunteerId])
}

model Skill {
  id   String @id @default(dbgenerated("gen_random_uuid()"))
  name String
}

model Address {
  id           String  @id @default(dbgenerated("gen_random_uuid()"))
  country      String
  city         String
  provinceName String
  street       String
  User         User?   @relation(fields: [userId], references: [id])
  userId       String?

  @@index([userId])
}

model Donation {
  id           String    @id @default(dbgenerated("gen_random_uuid()"))
  amount       Int
  User         User?     @relation(fields: [userId], references: [id])
  userId       String?
  isPublicName Boolean   @default(false)
  Project      Project?  @relation(fields: [projectId], references: [id])
  projectId    String?
  Payment      Payment[]
  createdAt    DateTime  @default(now())

  @@index([userId])
  @@index([projectId])
}

model Payment {
  id         String    @id @default(dbgenerated("gen_random_uuid()"))
  amount     Int
  invoiceId  String?
  status     String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime? @updatedAt
  Donation   Donation  @relation(fields: [donationId], references: [id])
  donationId String
  details    Json?
}

model Category {
  id              String            @id @default(dbgenerated("gen_random_uuid()"))
  name            String
  type            String?
  CategoryProject CategoryProject[]
  CategoryEvent   CategoryEvent[]
  CategoryMedia   CategoryMedia[]
}

model CategoryProject {
  id         String    @id @default(dbgenerated("gen_random_uuid()"))
  Project    Project?  @relation(fields: [projectId], references: [id])
  projectId  String?
  Category   Category? @relation(fields: [categoryId], references: [id])
  categoryId String?

  @@index([projectId])
  @@index([categoryId])
}

model CategoryEvent {
  id         String    @id @default(dbgenerated("gen_random_uuid()"))
  Event      Event?    @relation(fields: [eventId], references: [id])
  eventId    String?
  Category   Category? @relation(fields: [categoryId], references: [id])
  categoryId String?

  @@index([eventId])
  @@index([categoryId])
}

model EventImage {
  id      String  @id @default(dbgenerated("gen_random_uuid()"))
  owner   Event   @relation(fields: [ownerId], references: [id])
  ownerId String
  path    String
  type    String?
}

model ProjectImage {
  id      String  @id @default(dbgenerated("gen_random_uuid()"))
  owner   Project @relation(fields: [ownerId], references: [id])
  ownerId String
  path    String
  type    String?
}

model UserImage {
  id      String  @id @default(dbgenerated("gen_random_uuid()"))
  owner   User    @relation(fields: [ownerId], references: [id])
  ownerId String
  path    String
  type    String?
}

model Notification {
  id         String    @id @default(dbgenerated("gen_random_uuid()"))
  receiver   User      @relation("receiver", fields: [receiverId], references: [id])
  receiverId String
  sender     User      @relation("sender", fields: [senderId], references: [id])
  senderId   String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime? @updatedAt
  status     String?
  link       String?
  title      String
  body       String?
  type       String

  @@index([receiverId])
  @@index([senderId])
}

model Media {
  id            String          @id @default(dbgenerated("gen_random_uuid()"))
  title         String
  body          String          @db.Text
  owner         User            @relation(fields: [ownerId], references: [id])
  ownerId       String
  createdAt     DateTime        @default(now())
  CategoryMedia CategoryMedia[]
  MediaImage    MediaImage[]
}

model CategoryMedia {
  id         String    @id @default(dbgenerated("gen_random_uuid()"))
  Media      Media?    @relation(fields: [mediaId], references: [id])
  mediaId    String?
  Category   Category? @relation(fields: [categoryId], references: [id])
  categoryId String?

  @@index([mediaId])
  @@index([categoryId])
}

model MediaImage {
  id      String  @id @default(dbgenerated("gen_random_uuid()"))
  owner   Media   @relation(fields: [ownerId], references: [id])
  ownerId String
  path    String
  type    String?
}

model Banner {
  id               String          @id @default(dbgenerated("gen_random_uuid()"))
  path             String
  mobilePath       String
  title            String?
  description      String?
  link             String?
  BannerPosition   BannerPosition? @relation(fields: [bannerPositionId], references: [id])
  bannerPositionId String?
}

model BannerPosition {
  id      String   @id @default(dbgenerated("gen_random_uuid()"))
  code    String   @unique
  label   String
  Banners Banner[]
}
