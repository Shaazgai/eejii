// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator kysely {
  provider = "prisma-kysely"

  // Optionally provide a destination directory for the generated file
  // and a filename of your choice
  output       = "../src/lib/db"
  fileName     = "types.ts"
  // Optionally generate runtime enums to a separate file
  enumFileName = "enums.ts"
}

model User {
  // General not null fields
  id               String      @id @default(dbgenerated("gen_random_uuid()"))
  email            String      @unique
  phoneNumber      String
  createdAt        DateTime    @default(now())
  role             Role        @default(ROLE_USER)
  type             UserType    @default(USER_VOLUNTEER)
  requestSend      Boolean     @default(false)
  password         String?
  addressShort     String?
  //changed user request status boolean to 3 state
  requestStatus    UserStatus?
  // Volunteer fields
  firstName        String?
  lastName         String?
  gender           String?
  bio              String?
  birthDate        DateTime?
  skills           String?
  registerCode     String?
  // Partner, Supporter fields + bio
  organizationName String?
  organizationType String?
  introduction     String?
  contact          Json?

  // Relations
  Donations                Donation[]
  Addresses                Address[]
  VolunteerCertificates    Certificate[] @relation("VolunteerCertificate")
  OrganizationCertificates Certificate[] @relation("OrganizationCertificate")

  MyEvents              Event[]
  MyProject             Project[]
  CollaboratingEvents   EventCollaborator[]
  CollaboratingProjects ProjectCollaborator[]
  UserImages            UserImage[]
  ReceivedNotifications Notification[]        @relation("Receiver")
  SendNotifications     Notification[]        @relation("Sender")
  Medias                Media[]
  ParticipatingEvents   EventParticipator[]
  CertificateTemplates  CertificateTemplate[]

  PartnerPlan   PartnerPlan @relation(fields: [partnerPlanId], references: [id])
  partnerPlanId String      @unique

  PartnerBanners PartnerBanner[]
  PartnerPermits PartnerPermit[]
  Payments       Payment[]
}

enum Role {
  ROLE_USER
  ROLE_ADMIN
  ROLE_SUPER_ADMIN
}

enum UserType {
  USER_VOLUNTEER
  USER_PARTNER
  USER_SUPPORTER
}

enum ProjectType {
  FUNDRAISING
  GRANT_FUNDRAISING
}

enum EventType {
  EVENT
  VOLUNTEERING
}

enum UserStatus {
  REQUEST_PENDING
  REQUEST_DENIED
  REQUEST_APPROVED
}

enum ProjectStatus {
  PENDING
  APPROVED
  DENIED
  DONE
}

model Event {
  //General
  id          String         @id @default(dbgenerated("gen_random_uuid()"))
  type        EventType      @default(VOLUNTEERING)
  title       String
  description String
  location    String
  status      ProjectStatus?
  createdAt   DateTime       @default(now())
  enabled     Boolean
  startTime   DateTime?
  endTime     DateTime?
  contact     Json?
  featured    Boolean

  //Only on Volunteering event
  roles Json?

  //Relatoin
  Owner          User?               @relation(fields: [ownerId], references: [id])
  ownerId        String?
  CategoryEvents CategoryEvent[]
  EventImages    EventImage[]
  Participators  EventParticipator[]
  Collabrators   EventCollaborator[]

  @@index([ownerId])
}

model EventCollaborator {
  id      String  @id @default(dbgenerated("gen_random_uuid()"))
  User    User?   @relation(fields: [userId], references: [id])
  userId  String?
  Event   Event?  @relation(fields: [eventId], references: [id])
  eventId String?
  status  String?
  type    String?

  @@index([userId])
  @@index([eventId])
}

model EventParticipator {
  id      String  @id @default(dbgenerated("gen_random_uuid()"))
  User    User?   @relation(fields: [userId], references: [id])
  userId  String?
  Event   Event?  @relation(fields: [eventId], references: [id])
  eventId String?
  status  String?
  type    String?

  @@index([userId])
  @@index([eventId])
}

model Project {
  // General
  id            String         @id @default(dbgenerated("gen_random_uuid()"))
  type          ProjectType    @default(FUNDRAISING)
  title         String
  description   String
  contact       Json?
  startTime     DateTime?
  endTime       DateTime?
  enabled       Boolean
  status        ProjectStatus?
  createdAt     DateTime       @default(now())
  featured      Boolean
  //fundraising (Handiv oloh)
  link          String?
  goalAmount    Int?
  currentAmount Int?

  //Relation
  Owner            User?                 @relation(fields: [ownerId], references: [id])
  ownerId          String?
  Collaborators    ProjectCollaborator[]
  Donations        Donation[]
  CategoryProjects CategoryProject[]
  ProjectImages    ProjectImage[]

  @@index([ownerId])
}

model ProjectCollaborator {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?
  Project   Project? @relation(fields: [projectId], references: [id])
  projectId String?
  status    String?
  type      String?

  @@index([userId])
  @@index([projectId])
}

model Certificate {
  id          String   @id @default(dbgenerated("gen_random_uuid()"))
  name        String
  description String
  number      String
  grade       Int
  createdAt   DateTime @default(now())

  volunteerName    String
  organizationName String

  Volunteer   User?   @relation("VolunteerCertificate", fields: [volunteerId], references: [id])
  volunteerId String?

  Organization   User?   @relation("OrganizationCertificate", fields: [organizationId], references: [id])
  organizationId String?

  CertificateTemplate   CertificateTemplate? @relation(fields: [certificateTemplateId], references: [id])
  certificateTemplateId String?

  @@index([volunteerId, organizationId])
}

model Skill {
  id   String @id @default(dbgenerated("gen_random_uuid()"))
  name String
}

model Address {
  id           String  @id @default(dbgenerated("gen_random_uuid()"))
  country      String
  city         String
  provinceName String
  street       String
  User         User?   @relation(fields: [userId], references: [id])
  userId       String?

  @@index([userId])
}

model Donation {
  id           String    @id @default(dbgenerated("gen_random_uuid()"))
  amount       Int
  User         User?     @relation(fields: [userId], references: [id])
  userId       String?
  isPublicName Boolean   @default(false)
  Project      Project?  @relation(fields: [projectId], references: [id])
  projectId    String?
  Payments     Payment[]
  createdAt    DateTime  @default(now())

  @@index([userId])
  @@index([projectId])
}

model Payment {
  id        String    @id @default(dbgenerated("gen_random_uuid()"))
  amount    Int
  invoiceId String?
  status    String
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  details   Json?

  User   User?   @relation(fields: [userId], references: [id])
  userId String?

  Donation         Donation?       @relation(fields: [donationId], references: [id])
  donationId       String?
  Plan             UserPlan?       @relation(fields: [planId], references: [id])
  planId           String?
  BannerPosition   BannerPosition? @relation(fields: [bannerPositionId], references: [id])
  bannerPositionId String?
  Permit           Permit?         @relation(fields: [permitId], references: [id])
  permitId         String?

  @@index([planId, bannerPositionId, permitId, donationId])
}

model Category {
  id               String            @id @default(dbgenerated("gen_random_uuid()"))
  name             String
  type             String?
  CategoryProjects CategoryProject[]
  CategoryEvents   CategoryEvent[]
  CategoryMedias   CategoryMedia[]
}

model CategoryProject {
  id         String    @id @default(dbgenerated("gen_random_uuid()"))
  Project    Project?  @relation(fields: [projectId], references: [id])
  projectId  String?
  Category   Category? @relation(fields: [categoryId], references: [id])
  categoryId String?

  @@index([projectId])
  @@index([categoryId])
}

model CategoryEvent {
  id         String    @id @default(dbgenerated("gen_random_uuid()"))
  Event      Event?    @relation(fields: [eventId], references: [id])
  eventId    String?
  Category   Category? @relation(fields: [categoryId], references: [id])
  categoryId String?

  @@index([eventId])
  @@index([categoryId])
}

model EventImage {
  id      String  @id @default(dbgenerated("gen_random_uuid()"))
  Owner   Event   @relation(fields: [ownerId], references: [id])
  ownerId String
  path    String
  type    String?

  @@index([ownerId])
}

model ProjectImage {
  id      String  @id @default(dbgenerated("gen_random_uuid()"))
  Owner   Project @relation(fields: [ownerId], references: [id])
  ownerId String
  path    String
  type    String?

  @@index([ownerId])
}

model UserImage {
  id      String  @id @default(dbgenerated("gen_random_uuid()"))
  Owner   User    @relation(fields: [ownerId], references: [id])
  ownerId String
  path    String
  type    String?

  @@index([ownerId])
}

model Notification {
  id         String    @id @default(dbgenerated("gen_random_uuid()"))
  Receiver   User      @relation("Receiver", fields: [receiverId], references: [id])
  receiverId String
  Sender     User      @relation("Sender", fields: [senderId], references: [id])
  senderId   String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime? @updatedAt
  status     String?
  link       String?
  title      String
  body       String?
  type       String

  @@index([receiverId])
  @@index([senderId])
}

model Media {
  id             String          @id @default(dbgenerated("gen_random_uuid()"))
  title          String
  body           String          @db.Text
  Owner          User            @relation(fields: [ownerId], references: [id])
  ownerId        String
  createdAt      DateTime        @default(now())
  CategoryMedias CategoryMedia[]
  MediaImages    MediaImage[]

  @@index([ownerId])
}

model CategoryMedia {
  id         String    @id @default(dbgenerated("gen_random_uuid()"))
  Media      Media?    @relation(fields: [mediaId], references: [id])
  mediaId    String?
  Category   Category? @relation(fields: [categoryId], references: [id])
  categoryId String?

  @@index([mediaId])
  @@index([categoryId])
}

model MediaImage {
  id      String  @id @default(dbgenerated("gen_random_uuid()"))
  Owner   Media   @relation(fields: [ownerId], references: [id])
  ownerId String
  path    String
  type    String?

  @@index([ownerId])
}

model Banner {
  id               String          @id @default(dbgenerated("gen_random_uuid()"))
  path             String?
  mobilePath       String?
  title            String?
  description      String?
  link             String?
  BannerPosition   BannerPosition? @relation(fields: [bannerPositionId], references: [id])
  bannerPositionId String?
  PartnerBanner    PartnerBanner?

  @@index([bannerPositionId])
}

model BannerPosition {
  id        String    @id @default(dbgenerated("gen_random_uuid()"))
  code      String    @unique
  label     String
  type      String?
  thumbnail String?
  Banners   Banner[]
  Payments  Payment[]
}

model UserPlan {
  id            String  @id @default(dbgenerated("gen_random_uuid()"))
  code          String
  name          String?
  description   String?
  duration      Int
  price         Int
  originalPrice Int

  PlanImages   PlanImage[]
  PartnerPlans PartnerPlan[]
  Payments     Payment[]
}

model PlanImage {
  id      String   @id @default(dbgenerated("gen_random_uuid()"))
  path    String?
  type    String
  Owner   UserPlan @relation(fields: [ownerId], references: [id])
  ownerId String

  @@index([ownerId])
}

model PartnerPlan {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  startDate DateTime
  endDate   DateTime
  active    Boolean  @default(false)
  Plan      UserPlan @relation(fields: [planId], references: [id])
  planId    String
  User      User?

  @@index([planId])
}

model CertificateTemplate {
  id               String        @id @default(dbgenerated("gen_random_uuid()"))
  title            String
  description      String
  shortDescription String?
  organizationName String
  logoPath         String?
  stampPath        String
  Certificates     Certificate[]
  Owner            User?         @relation(fields: [userId], references: [id])
  userId           String?

  @@index([userId])
}

model PartnerBanner {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  Banner    Banner?  @relation(fields: [bannerId], references: [id])
  bannerId  String   @unique
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?
  active    Boolean
  startDate DateTime
  endDate   DateTime

  @@index([userId])
}

model Permit {
  id            String    @id @default(dbgenerated("gen_random_uuid()"))
  name          String
  description   String
  code          String    @unique
  price         Int
  originalPrice Int
  eventPermit   Int       @default(2)
  projectPermit Int       @default(2)
  bannerPermit  Int       @default(2)
  Payments      Payment[]
}

model PartnerPermit {
  id            String  @id @default(dbgenerated("gen_random_uuid()"))
  Partner       User?   @relation(fields: [userId], references: [id])
  eventPermit   Int     @default(2)
  projectPermit Int     @default(2)
  bannerPermit  Int     @default(2)
  userId        String?
}
