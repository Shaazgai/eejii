// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["jsonProtocol"]
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model User {
    id         String     @id @default(uuid())
    externalId String     @unique
    username   String
    email      String     @unique
    createdAt  DateTime   @default(now())
    role       Role       @default(ROLE_USER)
    type       String?
    Volunteer  Volunteer?
    Partner    Partner?
    Supporter  Supporter?
    Donation   Donation[]
}

enum Role {
    ROLE_USER
    ROLE_ADMIN
    ROLE_SUPER_ADMIN
}

model Volunteer {
    id                String              @id @default(uuid())
    firstName         String
    lastName          String
    phoneNumbers      Json?
    email             String?
    approved          Boolean             @default(false)
    birthday          DateTime?
    gender            String?
    bio               String?
    skills            Skill[]
    Certifactes       Certificate[]
    User              User                @relation(fields: [userId], references: [id])
    userId            String              @unique
    xp                Int?                @default(0)
    EducationHistory  EducationHistory[]
    EmploymentHistory EmploymentHistory[]
    Address           Address?            @relation(fields: [addressId], references: [id])
    addressId         String?             @unique
    EventVolunteer    EventVolunteer[]
}

model Partner {
    id                      String                    @id @default(uuid())
    User                    User                      @relation(fields: [userId], references: [id])
    userId                  String                    @unique
    organization            String
    email                   String
    phoneNumbers            Json
    bio                     String
    socialLinks             Json?
    Address                 Address?                  @relation(fields: [addressId], references: [id])
    addressId               String?                   @unique
    Fundraisings            Fundraising[]
    MyEvents                Event[]                   @relation("owner")
    EventPartner            EventPartner[]
    FundraisingPartner      FundraisingPartner[]
    GrantFundraisingPartner GrantFundraisingPartner[]
}

model Supporter {
    id                        String                      @id @default(uuid())
    User                      User                        @relation(fields: [userId], references: [id])
    userId                    String                      @unique
    organization              String
    email                     String
    phoneNumbers              Json
    bio                       String
    socialLinks               Json?
    Address                   Address?                    @relation(fields: [addressId], references: [id])
    addressId                 String?                     @unique
    GrantFundraisings         GrantFundraising[]
    EventSupporter            EventSupporter[]
    FundraisingSupporter      FundraisingSupporter[]
    GrantFundraisingSupporter GrantFundraisingSupporter[]
}

model Event {
    id             String           @id @default(uuid())
    title          String
    description    String
    location       String
    roles          Json?
    createdAt      DateTime         @default(now())
    startTime      DateTime?
    endTime        DateTime?
    requiredTime   String?
    contact        Json?
    Owner          Partner?         @relation(name: "owner", fields: [ownerId], references: [id])
    ownerId        String?
    EventVolunteer EventVolunteer[]
    EventSupporter EventSupporter[]
    EventPartner   EventPartner[]
    CategoryEvent  CategoryEvent[]

    @@index([ownerId])
}

model EventPartner {
    id        String   @id @default(uuid())
    Event     Event?   @relation(fields: [eventId], references: [id])
    Partner   Partner? @relation(fields: [partnerId], references: [id])
    createdAt DateTime @default(now())
    role      String?
    status    String
    type      String?
    partnerId String
    eventId   String?

    @@index([eventId])
    @@index([partnerId])
}

model EventSupporter {
    id          String     @id @default(uuid())
    Event       Event?     @relation(fields: [eventId], references: [id])
    Supporter   Supporter? @relation(fields: [supporterId], references: [id])
    createdAt   DateTime   @default(now())
    role        String?
    status      String
    type        String?
    supporterId String
    eventId     String?

    @@index([eventId])
    @@index([supporterId])
}

model EventVolunteer {
    id          String     @id @default(uuid())
    Event       Event?     @relation(fields: [eventId], references: [id])
    Volunteer   Volunteer? @relation(fields: [volunteerId], references: [id])
    volunteerId String
    eventId     String?
    createdAt   DateTime   @default(now())
    role        String?
    status      String
    type        String?

    @@index([eventId])
    @@index([volunteerId])
}

model Fundraising {
    id                   String                 @id @default(uuid())
    title                String
    description          String
    goalAmount           BigInt
    currentAmount        BigInt
    contact              Json?
    location             String?
    startTime            DateTime?
    endTime              DateTime?
    Partner              Partner?               @relation(fields: [partnerId], references: [id])
    partnerId            String?
    FundraisingSupporter FundraisingSupporter[]
    FundraisingPartner   FundraisingPartner[]
    Donation             Donation[]
    CategoryFundraising  CategoryFundraising[]

    @@index([partnerId])
}

model FundraisingSupporter {
    id            String       @id @default(uuid())
    Supporter     Supporter?   @relation(fields: [supporterId], references: [id])
    Fundraising   Fundraising? @relation(fields: [fundraisingId], references: [id])
    createdAt     DateTime     @default(now())
    role          String?
    status        String
    type          String?
    supporterId   String?
    fundraisingId String?

    @@index([supporterId])
    @@index([fundraisingId])
}

model FundraisingPartner {
    id            String       @id @default(uuid())
    Partner       Partner?     @relation(fields: [partnerId], references: [id])
    Fundraising   Fundraising? @relation(fields: [fundraisingId], references: [id])
    createdAt     DateTime     @default(now())
    role          String?
    status        String
    type          String?
    partnerId     String?
    fundraisingId String?

    @@index([fundraisingId])
    @@index([partnerId])
}

model GrantFundraising {
    id                        String                      @id @default(uuid())
    title                     String
    description               String
    goalAmount                BigInt
    currentAmount             BigInt
    contact                   Json?
    location                  String?
    startTime                 DateTime?
    endTime                   DateTime?
    Owner                     Supporter?                  @relation(fields: [ownerId], references: [id])
    ownerId                   String?                     @unique
    GrantFundraisingSupporter GrantFundraisingSupporter[]
    GrantFundraisingPartner   GrantFundraisingPartner[]
    CategoryGrantFundraising  CategoryGrantFundraising[]

    @@index([ownerId])
}

model GrantFundraisingSupporter {
    id                 String            @id @default(uuid())
    Supporter          Supporter?        @relation(fields: [supporterId], references: [id])
    GrantFundraising   GrantFundraising? @relation(fields: [grantFundraisingId], references: [id])
    createdAt          DateTime          @default(now())
    role               String?
    status             String
    type               String?
    supporterId        String?
    grantFundraisingId String?

    @@index([supporterId])
    @@index([grantFundraisingId])
}

model GrantFundraisingPartner {
    id                 String            @id @default(uuid())
    Partner            Partner?          @relation(fields: [partnerId], references: [id])
    GrantFundraising   GrantFundraising? @relation(fields: [grantFundraisingId], references: [id])
    createdAt          DateTime          @default(now())
    role               String?
    status             String
    type               String?
    grantFundraisingId String?
    partnerId          String?

    @@index([partnerId])
    @@index([grantFundraisingId])
}

model Certificate {
    id          String      @id @default(uuid())
    name        String
    description String
    Volunteer   Volunteer[]
}

model Skill {
    id          String     @id @default(uuid())
    name        String
    Volunteer   Volunteer? @relation(fields: [volunteerId], references: [id])
    volunteerId String?

    @@index([volunteerId])
}

model EducationHistory {
    id          String     @id @default(uuid())
    level       String
    schoolName  String
    from        DateTime
    to          DateTime?
    graduate    Boolean    @default(false)
    Volunteer   Volunteer? @relation(fields: [volunteerId], references: [id])
    volunteerId String?

    @@index([volunteerId])
}

model EmploymentHistory {
    id               String     @id @default(uuid())
    company          String
    position         String
    from             DateTime
    to               DateTime?
    currentlyWorking Boolean    @default(false)
    Volunteer        Volunteer? @relation(fields: [volunteerId], references: [id])
    volunteerId      String?

    @@index([volunteerId])
}

model Address {
    id           String      @id @default(uuid())
    country      String
    city         String
    provinceName String
    street       String
    Volunteer    Volunteer?
    Partner      Partner?
    Supporter    Supporter[]
}

model Donation {
    id            String       @id @default(uuid())
    amount        BigInt
    User          User?        @relation(fields: [userId], references: [id])
    userId        String?
    isPublicName  Boolean      @default(false)
    Fundraising   Fundraising? @relation(fields: [fundraisingId], references: [id])
    fundraisingId String?
    Payment       Payment?

    @@index([userId])
    @@index([fundraisingId])
}

model Payment {
    id         String   @id @default(uuid())
    amount     BigInt
    invoiceId  String
    status     String
    Donation   Donation @relation(fields: [donationId], references: [id])
    donationId String   @unique
}

model Category {
    id                       String                     @id @default(uuid())
    name                     String
    CategoryFundraising      CategoryFundraising[]
    CategoryEvent            CategoryEvent[]
    CategoryGrantFundraising CategoryGrantFundraising[]
}

model CategoryFundraising {
    id            String       @id @default(uuid())
    Fundraising   Fundraising? @relation(fields: [fundraisingId], references: [id])
    fundraisingId String?
    Category      Category?    @relation(fields: [categoryId], references: [id])
    categoryId    String?

    @@index([fundraisingId])
    @@index([categoryId])
}

model CategoryGrantFundraising {
    id                 String            @id @default(uuid())
    GrantFundraising   GrantFundraising? @relation(fields: [grantFundraisingId], references: [id])
    grantFundraisingId String?
    Category           Category?         @relation(fields: [categoryId], references: [id])
    categoryId         String?

    @@index([grantFundraisingId])
    @@index([categoryId])
}

model CategoryEvent {
    id         String    @id @default(uuid())
    Event      Event?    @relation(fields: [eventId], references: [id])
    eventId    String?
    Category   Category? @relation(fields: [categoryId], references: [id])
    categoryId String?

    @@index([eventId])
    @@index([categoryId])
}
